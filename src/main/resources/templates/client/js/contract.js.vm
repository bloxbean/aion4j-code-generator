const Web3 = require("aion-web3");
const BN = require("bn.js");

//Replace correct values for $web3_endpoint, $private_key, $contract_address
const web3 = new Web3(new Web3.providers.HttpProvider('$web3_endpoint'));
const privateKey = "$private_key";
const contractAddress = "$contract_address";

const account = web3.eth.accounts.privateKeyToAccount(privateKey);
console.log("Account : " + account.address);

/**************************************  Contract transactions **************************************/
#foreach($method in $abi.methods)
    async function ${method.methodName}(##
value##
        #foreach($param in $method.parameters)
,arg$foreach.count##
        #end) {
        //calling method getCount(), which takes no argument, and returns a string
        let data = web3.avm.contract.method('${method.methodName}').inputs([##
            #foreach($param in $method.parameters)
                #if(!$foreach.first), #end##
"$param"##
            #end], [##
            #foreach($param in $method.parameters)
                #if(!$foreach.first), #end##
arg$foreach.count##
            #end]).encode();

        const Tx = {
            from: account.address,
            to: contractAddress,
            data: data,
            gasPrice: 10000000000,
            gas: 2000000,
            value:new BN(value),
            type: '0x1'
        };

        //client signing
        const signed = await web3.eth.accounts.signTransaction(
            Tx, account.privateKey
        ).then((res) => signedCall = res);

        console.log(signed);
        const re = await web3.eth.sendSignedTransaction( signed.rawTransaction
        ).on('receipt', receipt => {
            console.log("Receipt received!\ntxHash =", receipt.transactionHash)
        }).catch(err => {
            console.log("Transaction error: " + err);
        });;

        //console.log(re); //reciept
        //console.log(re.logs[0].topics); //log topic
        return re;
    }

#end
/**************************************  Contract transactions ends **************************************/

/**************************************  Contract call transactions **************************************/
#foreach($method in $abi.methods)
    #if($method.returnType != 'void')
    async function ${method.methodName}_call(##
        #foreach($param in $method.parameters)
            #if(!$foreach.first), #end##
arg$foreach.count##
        #end) {
        //calling method getCount(), which takes no argument, and returns a string
        let data = web3.avm.contract.method('${method.methodName}').inputs([##
            #foreach($param in $method.parameters)
                #if(!$foreach.first), #end##
"$param"##
            #end], [##
            #foreach($param in $method.parameters)
                #if(!$foreach.first), #end##
arg$foreach.count##
            #end]).encode();

        const Tx = {
            from: account.address,
            to: contractAddress,
            data: data,
            gasPrice: 10000000000,
            gas: 2000000
            //type will be set to default
        };

        let res = await
        web3.eth.call(Tx);
        let avmRes = await web3.avm.contract.decode('$method.returnType', res);
        console.log("Response : \n");
        console.log(avmRes);
        return avmRes;
    }

    #end
#end
/**************************************  Contract call transactions Ends **************************************/

//Place your method call here